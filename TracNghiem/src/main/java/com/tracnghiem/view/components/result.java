/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.tracnghiem.view.components;

import com.tracnghiem.bus.AnswerBUS;
import com.tracnghiem.bus.QuestionBUS;
import com.tracnghiem.bus.ResultBUS;
import com.tracnghiem.dto.ExamDTO;
import com.tracnghiem.dto.QuestionDTO;
import com.tracnghiem.dto.ResultDTO;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author huulu
 */
public class result extends javax.swing.JPanel {

    /**
     * Creates new form result
     */
    private ArrayList<QuestionDTO> questionList = new ArrayList<>();
    private QuestionBUS questionBUS = new QuestionBUS();
    ResultBUS resultBUS = new ResultBUS();
    ResultDTO result;

    public result(ExamDTO exam) {
        initComponents();

        loadResultToTable(exam);
    }

     public result(ResultDTO r) {
        initComponents();

        loadResultToTable(r);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        mark = new javax.swing.JLabel();
        causai = new javax.swing.JLabel();
        caudung = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        time = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        totalQ = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Câu hỏi", "Kêt quả", "Điểm"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(550);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 96, 690, 458));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Tổng điểm:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Số câu sai:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 38, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Số câu đúng:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 70, -1, -1));

        mark.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        mark.setText("10.0");
        add(mark, new org.netbeans.lib.awtextra.AbsoluteConstraints(96, 6, -1, -1));

        causai.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        causai.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        causai.setText("10.0");
        add(causai, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 38, -1, -1));

        caudung.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        caudung.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        caudung.setText("10.0");
        add(caudung, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 70, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Thời gian bắt đầu:");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(237, 70, -1, -1));

        time.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        time.setText("00:00");
        add(time, new org.netbeans.lib.awtextra.AbsoluteConstraints(357, 70, -1, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Tổng số câu:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(238, 6, -1, -1));

        totalQ.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        totalQ.setText("10.0");
        add(totalQ, new org.netbeans.lib.awtextra.AbsoluteConstraints(325, 6, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void loadResultToTable(ResultDTO r) {
        DefaultTableModel model = new DefaultTableModel(
                new String[]{"Câu hỏi", "Kết quả", "Điểm"}, 0
        );
        
        String[] l = r.getRsAnswer().split(";");

        mark.setText(r.getRsMark()+"");
        totalQ.setText((l.length / 2) +"");
   
        String formattedDate = r.getRsDate().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss"));
        time.setText(formattedDate);
   
        ArrayList<Integer> lQ = new ArrayList<>();
        ArrayList<Integer> lA = new ArrayList<>();
        
        for (int i = 0; i < l.length; i++) {    
            if (i % 2 == 0) {
                lQ.add(Integer.valueOf(l[i].trim()));
            } else 
                lA.add(Integer.valueOf(l[i].trim()));
        }
        
        int countR = 0;
        for (Integer integer : lA) {
            if (integer != -1) {
                if (new AnswerBUS().findOne(integer).isIsRight()) {
                    countR++;
                }
            }
        }
        
        caudung.setText(countR+"");
        causai.setText((lQ.size() - countR) +"");
        
        
        
        // Tính điểm mỗi câu
        double pointPerQuestion = 10f / lQ.size();

        for(int i = 0; i < lQ.size(); i++) {
            QuestionDTO q = questionBUS.findOne(lQ.get(i));
            
            String qContent = q.getQContent();
            String aRs = "";
            double p = 0.0;
            if (lA.get(i) == -1) {
                aRs = "Sai";
                p=0.0;
            } else {
                aRs = new AnswerBUS().findOne(lA.get(i)).isIsRight() ? "Đúng" : "Sai";
                p = new AnswerBUS().findOne(lA.get(i)).isIsRight() ? pointPerQuestion : 0.0;
            }
            
            model.addRow(new Object[]{qContent, aRs, p});
        }
        
  
        jTable1.setModel(model); // Cập nhật dữ liệu cho JTable
    }
    
    private void loadResultToTable(ExamDTO exam) {
        DefaultTableModel model = new DefaultTableModel(
                new String[]{"Câu hỏi", "Kết quả", "Điểm"}, 0
        );


        Map<Integer, Integer> userAnswers = new HashMap<>();
        Map<Integer, Integer> correctAnswers = resultBUS.getCorrectAnswers(exam.getExQuesIDs());
        result = resultBUS.getResultByExCode(exam.getExCode());
        mark.setText(String.valueOf(result.getRsMark()));

        String data = result.getRsAnswer();
        data = data.replace("[", "").replace("]", "");
        String[] parts = data.split(",");

        for (int i = 0; i < parts.length - 1; i += 2) {
            int key = Integer.parseInt(parts[i].trim());
            int value = Integer.parseInt(parts[i + 1].trim());
            userAnswers.put(key, value);
        }
        questionList.clear();

        // Tách danh sách câu hỏi từ ex_quesIDs
        String[] questionIds = exam.getExQuesIDs().split(";");
        totalQ.setText(String.valueOf(questionIds.length));
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
        String formattedDate = result.getRsDate().format(formatter);
        time.setText(formattedDate);
        for (String quesId : questionIds) {
            QuestionDTO question = questionBUS.findOne(Integer.parseInt(quesId)); // Lấy câu hỏi từ DB
            if (question != null) {
                System.out.println(question.getQID());
                questionList.add(question);
            }
        }
        int cd = 0;
        // Tính điểm mỗi câu
        double pointPerQuestion = 10f / questionList.size();

        // Duyệt danh sách câu hỏi và hiển thị vào bảng
        for (QuestionDTO question : questionList) {
            int qID = question.getQID();
            String questionText = question.getQContent(); // Nội dung câu hỏi
            boolean isCorrect = userAnswers.getOrDefault(qID, -1).equals(correctAnswers.getOrDefault(qID, -2));
            String resultText = isCorrect ? "Đúng" : "Sai";
            double point;
            if (isCorrect) {
                point = pointPerQuestion;
                cd++; // Tăng số câu đúng
            } else {
                point = 0;
            }

            model.addRow(new Object[]{questionText, resultText, point});
        }

        caudung.setText(String.valueOf(cd));
        causai.setText(String.valueOf(questionIds.length - cd));

        jTable1.setModel(model); // Cập nhật dữ liệu cho JTable
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel caudung;
    private javax.swing.JLabel causai;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel mark;
    private javax.swing.JLabel time;
    private javax.swing.JLabel totalQ;
    // End of variables declaration//GEN-END:variables
}
